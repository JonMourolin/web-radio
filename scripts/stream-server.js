#!/usr/bin/env node

/**
 * Serveur de streaming radio bas√© sur Node.js
 * 
 * Ce script impl√©mente un serveur de streaming audio qui:
 * 1. R√©cup√®re les pistes audio depuis Cloudinary
 * 2. G√©n√®re une playlist al√©atoire
 * 3. G√®re la concat√©nation des pistes et les transitions
 * 4. Diffuse un flux audio continu accessible via HTTP
 * 
 * Usage: node scripts/stream-server.js [port]
 * Le port par d√©faut est 8000 si non sp√©cifi√©
 */

const http = require('http');
const { v2: cloudinary } = require('cloudinary');
const { Readable } = require('stream');
const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const { promisify } = require('util');
const Redis = require('@upstash/redis').Redis;

// Configuration
const PORT = process.argv[2] || 8000;
const RADIO_STATE_KEY = 'radio:state:v3';
const PLAYLIST_HISTORY_SIZE = 10; // Nombre de pistes √† conserver dans l'historique pour √©viter les r√©p√©titions
const TEMP_DIR = path.join(__dirname, '../tmp');

// Cr√©er le dossier temporaire s'il n'existe pas
if (!fs.existsSync(TEMP_DIR)) {
  fs.mkdirSync(TEMP_DIR, { recursive: true });
}

// Configuration de Redis
const redisUrl = process.env.KV_REST_API_URL || '';
const redisToken = process.env.KV_REST_API_TOKEN || '';

// Initialiser Redis
const redis = new Redis({
  url: redisUrl,
  token: redisToken,
});

// Configuration de Cloudinary
cloudinary.config({
  cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET
});

// √âtat global du serveur de streaming
const streamState = {
  playlist: [],         // Liste compl√®te des pistes disponibles
  currentQueue: [],     // File d'attente actuelle (pistes √† venir)
  playHistory: [],      // Historique des pistes jou√©es r√©cemment
  currentTrack: null,   // Piste en cours de lecture
  streamStartTime: null, // Heure de d√©marrage du streaming
  trackStartTime: null,  // Heure de d√©marrage de la piste en cours
  listeners: new Set(), // Connexions client actives
  outputStream: null,   // Flux de sortie ffmpeg
  isStreaming: false,   // √âtat du streaming (actif/inactif)
  bitrate: 128,         // Bitrate du flux audio en kbps
  volume: 1.0           // Volume de sortie (1.0 = 100%)
};

// Classe pour g√©rer le streaming audio
class AudioStreamer {
  constructor() {
    this.ffmpegProcess = null;
    this.currentInputStream = null;
    this.nextTrackPrepared = false;
  }

  // Initialiser le serveur de streaming
  async initialize() {
    console.log('üéß Initialisation du serveur de streaming audio...');
    
    try {
      // R√©cup√©rer toutes les pistes disponibles depuis Cloudinary
      await this.fetchTracksFromCloudinary();
      
      // Initialiser la file d'attente avec des pistes al√©atoires
      this.shufflePlaylist();
      
      console.log(`‚úÖ Serveur initialis√© avec succ√®s: ${streamState.playlist.length} pistes disponibles`);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du serveur:', error);
      return false;
    }
  }

  // R√©cup√©rer toutes les pistes depuis Cloudinary
  async fetchTracksFromCloudinary() {
    console.log('‚òÅÔ∏è R√©cup√©ration des pistes depuis Cloudinary...');
    
    try {
      // R√©cup√©rer toutes les ressources audio du dossier "web-radio/tracks"
      const result = await cloudinary.search
        .expression('resource_type:video AND folder=web-radio/tracks')
        .sort_by('public_id', 'asc')
        .max_results(500)
        .execute();
      
      if (!result || !result.resources || result.resources.length === 0) {
        throw new Error('Aucune piste trouv√©e sur Cloudinary');
      }
      
      // Transformer les ressources en objets de piste
      streamState.playlist = result.resources.map(resource => ({
        cloudinaryPublicId: resource.public_id,
        cloudinaryUrl: resource.secure_url,
        format: resource.format,
        duration: resource.duration || 180, // Dur√©e par d√©faut si non disponible
        title: this.extractTitleFromPublicId(resource.public_id),
        artist: 'Artiste inconnu', // √Ä remplacer par des m√©tadonn√©es r√©elles si disponibles
        album: 'Album inconnu', // √Ä remplacer par des m√©tadonn√©es r√©elles si disponibles
        coverUrl: this.generateCoverUrl(resource.public_id)
      }));
      
      console.log(`üìã ${streamState.playlist.length} pistes r√©cup√©r√©es depuis Cloudinary`);
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des pistes:', error);
      throw error;
    }
  }
  
  // Extraire un titre √† partir de l'ID public Cloudinary
  extractTitleFromPublicId(publicId) {
    // Exemple: "web-radio/tracks/ma-super-chanson" -> "Ma Super Chanson"
    const filename = path.basename(publicId);
    return filename
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
  
  // G√©n√©rer une URL de couverture par d√©faut
  generateCoverUrl(publicId) {
    // Utiliser une image par d√©faut de Matrix
    return "https://res.cloudinary.com/dyom5zfbh/image/upload/v1742158676/web-radio-assets/wyzcqttcvbdhzuf3cuvn.jpg";
  }

  // M√©langer la playlist et initialiser la file d'attente
  shufflePlaylist() {
    console.log('üîÄ G√©n√©ration d\'une nouvelle playlist al√©atoire...');
    
    // Copier la playlist
    const tracks = [...streamState.playlist];
    
    // M√©langer les pistes (algorithme de Fisher-Yates)
    for (let i = tracks.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [tracks[i], tracks[j]] = [tracks[j], tracks[i]];
    }
    
    // √âviter de r√©p√©ter les pistes r√©cemment jou√©es
    const filteredTracks = tracks.filter(track => 
      !streamState.playHistory.some(historyTrack => 
        historyTrack.cloudinaryPublicId === track.cloudinaryPublicId
      )
    );
    
    // Utiliser les pistes filtr√©es, ou toutes les pistes si le filtre est trop restrictif
    streamState.currentQueue = filteredTracks.length > 5 ? filteredTracks : tracks;
    
    console.log(`üìã Nouvelle file d'attente g√©n√©r√©e avec ${streamState.currentQueue.length} pistes`);
  }

  // Obtenir la prochaine piste √† jouer
  getNextTrack() {
    // Si la file d'attente est vide, la r√©g√©n√©rer
    if (streamState.currentQueue.length === 0) {
      this.shufflePlaylist();
    }
    
    // R√©cup√©rer la premi√®re piste de la file d'attente
    const nextTrack = streamState.currentQueue.shift();
    
    // Ajouter la piste √† l'historique
    streamState.playHistory.unshift(nextTrack);
    
    // Limiter la taille de l'historique
    if (streamState.playHistory.length > PLAYLIST_HISTORY_SIZE) {
      streamState.playHistory.pop();
    }
    
    return nextTrack;
  }

  // D√©marrer le streaming audio
  async startStreaming() {
    if (streamState.isStreaming) {
      console.log('‚ö†Ô∏è Le streaming est d√©j√† en cours');
      return;
    }
    
    console.log('‚ñ∂Ô∏è D√©marrage du streaming audio...');
    
    try {
      // Initialiser l'heure de d√©marrage
      streamState.streamStartTime = new Date();
      
      // S√©lectionner la premi√®re piste
      streamState.currentTrack = this.getNextTrack();
      streamState.trackStartTime = new Date();
      
      // D√©marrer le processus de streaming
      this.startFfmpegStreaming();
      
      // Enregistrer l'√©tat du streaming dans Redis
      await this.updateRedisState();
      
      console.log(`üéµ Streaming d√©marr√© avec: ${streamState.currentTrack.title}`);
      streamState.isStreaming = true;
    } catch (error) {
      console.error('‚ùå Erreur lors du d√©marrage du streaming:', error);
      streamState.isStreaming = false;
    }
  }

  // D√©marrer le processus ffmpeg pour le streaming audio
  startFfmpegStreaming() {
    // Cr√©er un flux de sortie pour le streaming HTTP
    streamState.outputStream = new Readable({
      read() {} // N√©cessaire pour les flux Readable
    });
    
    // D√©marrer le processus ffmpeg
    this.processNextTrack();
    
    // Planifier la pr√©paration de la piste suivante
    this.scheduleNextTrack();
  }

  // Traiter la piste actuelle avec ffmpeg
  processNextTrack() {
    const currentTrack = streamState.currentTrack;
    console.log(`‚ñ∂Ô∏è Lecture de: ${currentTrack.title}`);
    
    // T√©l√©charger temporairement le fichier pour ffmpeg
    const tempFilePath = path.join(TEMP_DIR, `${path.basename(currentTrack.cloudinaryPublicId)}.mp3`);
    
    // T√©l√©charger le fichier avec ffmpeg
    ffmpeg(currentTrack.cloudinaryUrl)
      .outputOptions([
        `-c:a libmp3lame`,
        `-b:a ${streamState.bitrate}k`,
        `-ar 44100`,
        `-ac 2`,
        `-f mp3`,
        `-af volume=${streamState.volume}`,
      ])
      .on('start', (commandLine) => {
        console.log(`üîÑ D√©but du traitement ffmpeg: ${currentTrack.title}`);
      })
      .on('error', (err) => {
        console.error(`‚ùå Erreur ffmpeg pour ${currentTrack.title}:`, err);
        // En cas d'erreur, passer √† la piste suivante
        this.prepareNextTrack();
      })
      .on('end', () => {
        console.log(`‚úÖ Fin du traitement ffmpeg: ${currentTrack.title}`);
        // Supprimer le fichier temporaire
        if (fs.existsSync(tempFilePath)) {
          fs.unlinkSync(tempFilePath);
        }
        
        // Si la piste suivante n'est pas d√©j√† pr√©par√©e, la pr√©parer maintenant
        if (!this.nextTrackPrepared) {
          this.prepareNextTrack();
        }
      })
      .pipe(streamState.outputStream, { end: false });
  }

  // Planifier la pr√©paration de la piste suivante
  scheduleNextTrack() {
    const currentTrack = streamState.currentTrack;
    const trackDuration = currentTrack.duration * 1000; // Convertir en millisecondes
    
    // Pr√©voir la pr√©paration de la piste suivante l√©g√®rement avant la fin
    // de la piste actuelle (10 secondes avant ou √† 80% de la dur√©e pour les pistes courtes)
    const prepareTime = Math.min(trackDuration - 10000, trackDuration * 0.8);
    
    console.log(`‚è±Ô∏è Planification de la piste suivante dans ${prepareTime/1000} secondes`);
    
    setTimeout(() => {
      this.prepareNextTrack();
    }, prepareTime);
  }

  // Pr√©parer la piste suivante
  async prepareNextTrack() {
    if (this.nextTrackPrepared) {
      console.log('‚ö†Ô∏è La piste suivante est d√©j√† pr√©par√©e');
      return;
    }
    
    console.log('üîÑ Pr√©paration de la piste suivante...');
    this.nextTrackPrepared = true;
    
    // Obtenir la prochaine piste
    const nextTrack = this.getNextTrack();
    
    // Mettre √† jour l'√©tat
    const previousTrack = streamState.currentTrack;
    streamState.currentTrack = nextTrack;
    streamState.trackStartTime = new Date();
    
    // Mettre √† jour l'√©tat dans Redis
    await this.updateRedisState();
    
    console.log(`üéµ Changement de piste: ${previousTrack.title} ‚Üí ${nextTrack.title}`);
    
    // D√©marrer le traitement de la nouvelle piste
    this.processNextTrack();
    
    // Planifier la piste suivante
    this.scheduleNextTrack();
    
    // R√©initialiser l'indicateur
    this.nextTrackPrepared = false;
  }

  // Mettre √† jour l'√©tat du streaming dans Redis
  async updateRedisState() {
    try {
      const now = new Date();
      const elapsedTime = (now.getTime() - streamState.trackStartTime.getTime()) / 1000;
      
      // Cr√©er l'√©tat √† stocker dans Redis
      const state = {
        isPlaying: true,
        currentTrack: streamState.currentTrack,
        position: elapsedTime,
        startTime: streamState.trackStartTime,
        tracks: [...streamState.playHistory, ...streamState.currentQueue],
        currentTrackIndex: 0,
        lastChecked: now,
        nextTracks: streamState.currentQueue.slice(0, 3) // Les 3 prochaines pistes
      };
      
      // Enregistrer dans Redis
      await redis.set(RADIO_STATE_KEY, state);
      console.log('üíæ √âtat du streaming mis √† jour dans Redis');
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour de l\'√©tat Redis:', error);
    }
  }

  // Arr√™ter le streaming
  stopStreaming() {
    console.log('‚èπÔ∏è Arr√™t du streaming...');
    
    // Arr√™ter le processus ffmpeg s'il est en cours
    if (this.ffmpegProcess) {
      this.ffmpegProcess.kill();
      this.ffmpegProcess = null;
    }
    
    // Fermer toutes les connexions client
    for (const client of streamState.listeners) {
      client.end();
    }
    streamState.listeners.clear();
    
    // R√©initialiser l'√©tat
    streamState.isStreaming = false;
    streamState.outputStream = null;
    
    console.log('‚úÖ Streaming arr√™t√©');
  }
}

// Cr√©er et d√©marrer le serveur HTTP
async function startServer() {
  // Cr√©er l'instance du streamer audio
  const audioStreamer = new AudioStreamer();
  
  // Initialiser le streamer
  const initSuccess = await audioStreamer.initialize();
  if (!initSuccess) {
    console.error('‚ùå Impossible de d√©marrer le serveur en raison d\'erreurs d\'initialisation');
    process.exit(1);
  }
  
  // Cr√©er le serveur HTTP
  const server = http.createServer((req, res) => {
    const url = new URL(req.url, `http://${req.headers.host}`);
    
    // Route API pour obtenir l'√©tat actuel
    if (url.pathname === '/status') {
      res.writeHead(200, { 'Content-Type': 'application/json' });
      
      const statusResponse = {
        currentTrack: streamState.currentTrack,
        nextTracks: streamState.currentQueue.slice(0, 3),
        listeners: streamState.listeners.size,
        isStreaming: streamState.isStreaming,
        uptime: streamState.streamStartTime ? Math.floor((new Date() - streamState.streamStartTime) / 1000) : 0,
        trackPosition: streamState.trackStartTime ? Math.floor((new Date() - streamState.trackStartTime) / 1000) : 0
      };
      
      res.end(JSON.stringify(statusResponse));
      return;
    }
    
    // Route principale pour le streaming audio
    if (url.pathname === '/stream') {
      // V√©rifier si le streaming est actif
      if (!streamState.isStreaming || !streamState.outputStream) {
        res.writeHead(503, { 'Content-Type': 'text/plain' });
        res.end('Le service de streaming n\'est pas disponible actuellement');
        return;
      }
      
      // Configurer les en-t√™tes pour le streaming audio
      res.writeHead(200, {
        'Content-Type': 'audio/mpeg',
        'Cache-Control': 'no-cache, no-store',
        'Connection': 'keep-alive',
        'Transfer-Encoding': 'chunked'
      });
      
      // Ajouter le client √† la liste des auditeurs
      streamState.listeners.add(res);
      console.log(`üëÇ Nouvel auditeur connect√© (total: ${streamState.listeners.size})`);
      
      // Configurer le flux de donn√©es vers le client
      const sendAudioData = (chunk) => {
        res.write(chunk);
      };
      
      streamState.outputStream.on('data', sendAudioData);
      
      // G√©rer la d√©connexion du client
      req.on('close', () => {
        streamState.outputStream.removeListener('data', sendAudioData);
        streamState.listeners.delete(res);
        console.log(`üëã Auditeur d√©connect√© (reste: ${streamState.listeners.size})`);
      });
      
      return;
    }
    
    // Page d'accueil simple
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(`
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="UTF-8">
          <title>Serveur de Streaming Radio</title>
          <style>
            body { font-family: monospace; background: #0a0a0a; color: #00FF41; max-width: 800px; margin: 0 auto; padding: 20px; }
            h1 { border-bottom: 1px solid #00FF41; padding-bottom: 10px; }
            audio { width: 100%; margin: 20px 0; }
            .info { background: #111; padding: 15px; border-radius: 5px; margin: 20px 0; }
            pre { background: #0a0a0a; padding: 10px; border-radius: 5px; overflow: auto; }
          </style>
        </head>
        <body>
          <h1>Serveur de Streaming Radio Jon</h1>
          <div class="info">
            <p>√âtat du serveur: ${streamState.isStreaming ? '‚úÖ En ligne' : '‚ùå Hors ligne'}</p>
            <p>Connect√©s: ${streamState.listeners.size} auditeurs</p>
            <p>Pistes disponibles: ${streamState.playlist.length}</p>
            ${streamState.currentTrack ? `<p>En cours: ${streamState.currentTrack.title}</p>` : ''}
          </div>
          
          <h2>Lecteur</h2>
          <audio controls autoplay>
            <source src="/stream" type="audio/mpeg">
            Votre navigateur ne prend pas en charge la lecture audio.
          </audio>
          
          <h2>API</h2>
          <p>R√©cup√©rer l'√©tat actuel: <a href="/status" target="_blank">/status</a></p>
          <p>Flux audio: <a href="/stream" target="_blank">/stream</a></p>
        </body>
      </html>
    `);
  });
  
  // D√©marrer le serveur HTTP
  server.listen(PORT, () => {
    console.log(`üöÄ Serveur de streaming d√©marr√© sur le port ${PORT}`);
    console.log(`üì° Flux audio disponible sur: http://localhost:${PORT}/stream`);
    console.log(`‚ÑπÔ∏è  Informations sur l'√©tat: http://localhost:${PORT}/status`);
    console.log(`üîó Interface Web: http://localhost:${PORT}/`);
    
    // D√©marrer le streaming
    audioStreamer.startStreaming();
  });
  
  // G√©rer l'arr√™t propre du serveur
  process.on('SIGINT', () => {
    console.log('\nüëã Arr√™t du serveur...');
    audioStreamer.stopStreaming();
    server.close(() => {
      console.log('‚úÖ Serveur arr√™t√© proprement');
      process.exit(0);
    });
  });
}

// V√©rifier que les variables d'environnement n√©cessaires sont d√©finies
if (!process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME || 
    !process.env.CLOUDINARY_API_KEY || 
    !process.env.CLOUDINARY_API_SECRET) {
  console.error('‚ùå Erreur: Variables d\'environnement Cloudinary non d√©finies');
  console.error('Veuillez d√©finir NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY et CLOUDINARY_API_SECRET');
  process.exit(1);
}

if (!process.env.KV_REST_API_URL || !process.env.KV_REST_API_TOKEN) {
  console.error('‚ùå Erreur: Variables d\'environnement Redis non d√©finies');
  console.error('Veuillez d√©finir KV_REST_API_URL et KV_REST_API_TOKEN');
  process.exit(1);
}

// D√©marrer le serveur
startServer(); 