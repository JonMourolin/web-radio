/**
 * Ce script est destin√© √† √™tre ex√©cut√© dans la console du navigateur
 * pour tester la progression des pistes sur le site Radio.
 * 
 * Instructions:
 * 1. Ouvrez la console du navigateur (F12 ou Ctrl+Shift+J)
 * 2. Copiez-collez ce script
 * 3. Appuyez sur Entr√©e pour l'ex√©cuter
 */

(function() {
  console.log("-------------------------------------");
  console.log("üéµ Test de progression des pistes üéµ");
  console.log("-------------------------------------");

  // Fonction pour formater le temps en MM:SS
  function formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }

  // Fonction pour obtenir l'√©tat actuel
  async function getCurrentState() {
    try {
      const response = await fetch('/api/stream?force=true');
      if (!response.ok) throw new Error('√âchec de la requ√™te API');
      return await response.json();
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de l\'√©tat:', error);
      return null;
    }
  }

  // Fonction pour demander manuellement un changement de piste
  async function forceNextTrack() {
    try {
      const response = await fetch('/api/stream', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ action: 'nextTrack' })
      });
      
      if (!response.ok) throw new Error('√âchec du changement de piste');
      return await response.json();
    } catch (error) {
      console.error('Erreur lors du changement de piste:', error);
      return null;
    }
  }

  // V√©rifier la progression toutes les 2 secondes
  let lastTrackId = null;
  let trackChangeCount = 0;
  
  async function checkProgress() {
    const state = await getCurrentState();
    if (!state || !state.currentTrack) {
      console.log("‚ùå Aucun √©tat radio disponible");
      return;
    }
    
    const currentId = state.currentTrack.cloudinaryPublicId;
    if (lastTrackId !== null && currentId !== lastTrackId) {
      console.log(`%cüîÑ CHANGEMENT DE PISTE D√âTECT√â ! ${trackChangeCount + 1}`, 'background: #00FF41; color: black; padding: 4px; border-radius: 4px;');
      trackChangeCount++;
    }
    
    lastTrackId = currentId;
    
    console.log(`---------------------------------------------------`);
    console.log(`‚ñ∂Ô∏è Lecture en cours : ${state.currentTrack.artist} - ${state.currentTrack.title}`);
    console.log(`‚è±Ô∏è Position : ${formatTime(state.position)} / ${formatTime(state.currentTrack.duration)}`);
    console.log(`‚è≥ Restant : ${formatTime(state.remainingTime)}`);
    console.log(`üéÆ Lecture : ${state.isPlaying ? '‚úÖ Active' : '‚è∏Ô∏è En pause'}`);
    console.log(`---------------------------------------------------`);
  }
  
  // D√©marrer la surveillance
  console.log("‚ñ∂Ô∏è D√©marrage de la surveillance...");
  checkProgress();
  const interval = setInterval(checkProgress, 2000);
  
  // Ajouter des commandes accessibles globalement
  window.radioTest = {
    stop: () => {
      clearInterval(interval);
      console.log("‚èπÔ∏è Surveillance arr√™t√©e");
      return "Surveillance arr√™t√©e apr√®s " + trackChangeCount + " changements de piste d√©tect√©s.";
    },
    
    nextTrack: async () => {
      console.log("‚è≠Ô∏è Demande de passage √† la piste suivante...");
      const result = await forceNextTrack();
      if (result) {
        console.log("‚úÖ Piste suivante demand√©e avec succ√®s");
        checkProgress();
      }
      return "Demande de changement de piste envoy√©e.";
    },
    
    diagnose: () => {
      if (window.radioPlayer && window.radioPlayer.diagnose) {
        return window.radioPlayer.diagnose();
      } else {
        console.log("‚ùå Fonction de diagnostic non disponible");
        return "Fonction de diagnostic non disponible.";
      }
    }
  };
  
  console.log("-------------------------------------");
  console.log("‚úÖ Surveillance d√©marr√©e !");
  console.log("Pour arr√™ter : radioTest.stop()");
  console.log("Pour passer √† la piste suivante : radioTest.nextTrack()");
  console.log("Pour diagnostiquer : radioTest.diagnose()");
  console.log("-------------------------------------");
  
  return "Script de test d√©marr√©. Utilisez radioTest.stop() pour arr√™ter.";
})(); 